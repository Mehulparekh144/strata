// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: api/strata.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Strata_Set_FullMethodName         = "/Strata.Strata/Set"
	Strata_Get_FullMethodName         = "/Strata.Strata/Get"
	Strata_Del_FullMethodName         = "/Strata.Strata/Del"
	Strata_SetEx_FullMethodName       = "/Strata.Strata/SetEx"
	Strata_LPush_FullMethodName       = "/Strata.Strata/LPush"
	Strata_LPop_FullMethodName        = "/Strata.Strata/LPop"
	Strata_RPush_FullMethodName       = "/Strata.Strata/RPush"
	Strata_RPop_FullMethodName        = "/Strata.Strata/RPop"
	Strata_DocSet_FullMethodName      = "/Strata.Strata/DocSet"
	Strata_DocGet_FullMethodName      = "/Strata.Strata/DocGet"
	Strata_DocDel_FullMethodName      = "/Strata.Strata/DocDel"
	Strata_XReadStream_FullMethodName = "/Strata.Strata/XReadStream"
)

// StrataClient is the client API for Strata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrataClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
	SetEx(ctx context.Context, in *SetExRequest, opts ...grpc.CallOption) (*SetExResponse, error)
	// List
	LPush(ctx context.Context, in *ListPushRequest, opts ...grpc.CallOption) (*ListPushResponse, error)
	LPop(ctx context.Context, in *ListPopRequest, opts ...grpc.CallOption) (*ListPopResponse, error)
	RPush(ctx context.Context, in *ListPushRequest, opts ...grpc.CallOption) (*ListPushResponse, error)
	RPop(ctx context.Context, in *ListPopRequest, opts ...grpc.CallOption) (*ListPopResponse, error)
	// Doc
	DocSet(ctx context.Context, in *DocSetRequest, opts ...grpc.CallOption) (*DocSetResponse, error)
	DocGet(ctx context.Context, in *DocGetRequest, opts ...grpc.CallOption) (*DocGetResponse, error)
	DocDel(ctx context.Context, in *DocDelRequest, opts ...grpc.CallOption) (*DocDelResponse, error)
	// Stream
	XReadStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error)
}

type strataClient struct {
	cc grpc.ClientConnInterface
}

func NewStrataClient(cc grpc.ClientConnInterface) StrataClient {
	return &strataClient{cc}
}

func (c *strataClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, Strata_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Strata_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelResponse)
	err := c.cc.Invoke(ctx, Strata_Del_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) SetEx(ctx context.Context, in *SetExRequest, opts ...grpc.CallOption) (*SetExResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetExResponse)
	err := c.cc.Invoke(ctx, Strata_SetEx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) LPush(ctx context.Context, in *ListPushRequest, opts ...grpc.CallOption) (*ListPushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPushResponse)
	err := c.cc.Invoke(ctx, Strata_LPush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) LPop(ctx context.Context, in *ListPopRequest, opts ...grpc.CallOption) (*ListPopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPopResponse)
	err := c.cc.Invoke(ctx, Strata_LPop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) RPush(ctx context.Context, in *ListPushRequest, opts ...grpc.CallOption) (*ListPushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPushResponse)
	err := c.cc.Invoke(ctx, Strata_RPush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) RPop(ctx context.Context, in *ListPopRequest, opts ...grpc.CallOption) (*ListPopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPopResponse)
	err := c.cc.Invoke(ctx, Strata_RPop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) DocSet(ctx context.Context, in *DocSetRequest, opts ...grpc.CallOption) (*DocSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocSetResponse)
	err := c.cc.Invoke(ctx, Strata_DocSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) DocGet(ctx context.Context, in *DocGetRequest, opts ...grpc.CallOption) (*DocGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocGetResponse)
	err := c.cc.Invoke(ctx, Strata_DocGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) DocDel(ctx context.Context, in *DocDelRequest, opts ...grpc.CallOption) (*DocDelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocDelResponse)
	err := c.cc.Invoke(ctx, Strata_DocDel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strataClient) XReadStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Strata_ServiceDesc.Streams[0], Strata_XReadStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Strata_XReadStreamClient = grpc.ServerStreamingClient[StreamResponse]

// StrataServer is the server API for Strata service.
// All implementations must embed UnimplementedStrataServer
// for forward compatibility.
type StrataServer interface {
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
	SetEx(context.Context, *SetExRequest) (*SetExResponse, error)
	// List
	LPush(context.Context, *ListPushRequest) (*ListPushResponse, error)
	LPop(context.Context, *ListPopRequest) (*ListPopResponse, error)
	RPush(context.Context, *ListPushRequest) (*ListPushResponse, error)
	RPop(context.Context, *ListPopRequest) (*ListPopResponse, error)
	// Doc
	DocSet(context.Context, *DocSetRequest) (*DocSetResponse, error)
	DocGet(context.Context, *DocGetRequest) (*DocGetResponse, error)
	DocDel(context.Context, *DocDelRequest) (*DocDelResponse, error)
	// Stream
	XReadStream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error
	mustEmbedUnimplementedStrataServer()
}

// UnimplementedStrataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStrataServer struct{}

func (UnimplementedStrataServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedStrataServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStrataServer) Del(context.Context, *DelRequest) (*DelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedStrataServer) SetEx(context.Context, *SetExRequest) (*SetExResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEx not implemented")
}
func (UnimplementedStrataServer) LPush(context.Context, *ListPushRequest) (*ListPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPush not implemented")
}
func (UnimplementedStrataServer) LPop(context.Context, *ListPopRequest) (*ListPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPop not implemented")
}
func (UnimplementedStrataServer) RPush(context.Context, *ListPushRequest) (*ListPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPush not implemented")
}
func (UnimplementedStrataServer) RPop(context.Context, *ListPopRequest) (*ListPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPop not implemented")
}
func (UnimplementedStrataServer) DocSet(context.Context, *DocSetRequest) (*DocSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocSet not implemented")
}
func (UnimplementedStrataServer) DocGet(context.Context, *DocGetRequest) (*DocGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocGet not implemented")
}
func (UnimplementedStrataServer) DocDel(context.Context, *DocDelRequest) (*DocDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocDel not implemented")
}
func (UnimplementedStrataServer) XReadStream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method XReadStream not implemented")
}
func (UnimplementedStrataServer) mustEmbedUnimplementedStrataServer() {}
func (UnimplementedStrataServer) testEmbeddedByValue()                {}

// UnsafeStrataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrataServer will
// result in compilation errors.
type UnsafeStrataServer interface {
	mustEmbedUnimplementedStrataServer()
}

func RegisterStrataServer(s grpc.ServiceRegistrar, srv StrataServer) {
	// If the following call pancis, it indicates UnimplementedStrataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Strata_ServiceDesc, srv)
}

func _Strata_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_Del_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_SetEx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetExRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).SetEx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_SetEx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).SetEx(ctx, req.(*SetExRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_LPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).LPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_LPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).LPush(ctx, req.(*ListPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_LPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).LPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_LPop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).LPop(ctx, req.(*ListPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_RPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).RPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_RPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).RPush(ctx, req.(*ListPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_RPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).RPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_RPop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).RPop(ctx, req.(*ListPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_DocSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).DocSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_DocSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).DocSet(ctx, req.(*DocSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_DocGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).DocGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_DocGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).DocGet(ctx, req.(*DocGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_DocDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrataServer).DocDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Strata_DocDel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrataServer).DocDel(ctx, req.(*DocDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Strata_XReadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StrataServer).XReadStream(m, &grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Strata_XReadStreamServer = grpc.ServerStreamingServer[StreamResponse]

// Strata_ServiceDesc is the grpc.ServiceDesc for Strata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Strata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Strata.Strata",
	HandlerType: (*StrataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Strata_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Strata_Get_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _Strata_Del_Handler,
		},
		{
			MethodName: "SetEx",
			Handler:    _Strata_SetEx_Handler,
		},
		{
			MethodName: "LPush",
			Handler:    _Strata_LPush_Handler,
		},
		{
			MethodName: "LPop",
			Handler:    _Strata_LPop_Handler,
		},
		{
			MethodName: "RPush",
			Handler:    _Strata_RPush_Handler,
		},
		{
			MethodName: "RPop",
			Handler:    _Strata_RPop_Handler,
		},
		{
			MethodName: "DocSet",
			Handler:    _Strata_DocSet_Handler,
		},
		{
			MethodName: "DocGet",
			Handler:    _Strata_DocGet_Handler,
		},
		{
			MethodName: "DocDel",
			Handler:    _Strata_DocDel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "XReadStream",
			Handler:       _Strata_XReadStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/strata.proto",
}
